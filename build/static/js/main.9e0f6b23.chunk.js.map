{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","useState","quote","setQuote","useEffect","a","fetch","then","result","json","data","randomQuote","Math","floor","random","length","console","log","text","fetchQuote","customStyle","open","setOpen","input","setInput","Modal","onClose","e","aria-labelledby","aria-describedby","className","todo","Input","placeholder","value","onChange","event","target","Button","variant","color","onClick","collection","doc","id","set","merge","List","ListItem","ListItemText","primary","secondary","author","delete","App","todos","setTodos","orderBy","onSnapshot","snapshot","docs","map","InputLabel","disabled","type","preventDefault","add","charAt","toUpperCase","substring","timestamp","FieldValue","serverTimestamp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e0f6b23.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"`${process.env.REACT_APP_FIREBASE_KEY}`\",\n    authDomain: \"todoapp-5340e.firebaseapp.com\",\n    projectId: \"todoapp-5340e\",\n    storageBucket: \"todoapp-5340e.appspot.com\",\n    messagingSenderId: \"151555746690\",\n    appId: \"1:151555746690:web:c1b118495dad79e340bd9b\"\n});\n\n// console.log(process.env)\n\nconst db = firebaseApp.firestore();\n// const auth = firebase.auth();\n// const storage = firebase.storage();\n\n\nexport default db;\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { Input, Modal ,Button, List, ListItem, ListItemText } from '@material-ui/core';\nimport './Todo.css';\nimport db from \"./firebase\"\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n\n\nfunction Todo(props) {\n\n  const [quote, setQuote] = useState({});\n\n  useEffect(() => {\n    const fetchQuote = async () =>\n      await fetch(\n        `https://type.fit/api/quotes`\n      )\n        .then((result) => result.json())\n        .then((data) => {\n          const randomQuote = Math.floor(Math.random() * data.length)\n          console.log(data[randomQuote].text);\n            setQuote(data[randomQuote]);\n\n      });\n    fetchQuote();\n\n  }, []);\n\n\n  const customStyle = useStyles();\n  const [open, setOpen] = useState(false);\n  const [input, setInput] = useState();\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const updateTodo = () => {\n    db.collection('todos')\n    .doc(props.todo.id)\n    .set({\n      todo: input\n    }, { merge: true });\n    setOpen(false);\n  }\n\n\n  return (\n    <>\n\n    <Modal\n      open={open} onClose={e => setOpen(false)} aria-labelledby=\"simple-modal-title\" aria-describedby=\"simple-modal-description\">\n      <div className={customStyle.paper}>\n        <h4>Update TODO</h4>\n        <p> {props.todo.todo}</p>\n        <div className=\"update__todo\">\n          <form>\n            <Input\n              placeholder=\"Update...\"\n              value={input}\n              onChange={event => setInput(event.target.value)}\n            />\n          </form>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={updateTodo}>Confirm\n          </Button>\n        </div>\n      </div>\n    </Modal>\n\n    <List className=\"todo__list\">\n      <ListItem className=\"todo__li\">\n        <ListItemText\n          primary={props.todo.todo}\n          secondary={quote.text + '- ' + quote.author}/>\n      </ListItem>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={e => setOpen(true)}\n        >\n        Update Todo\n      </Button>\n        <DeleteForeverIcon\n          onClick={event =>\n          db.collection('todos')\n          .doc(props.todo.id)\n          .delete()}\n        />\n   </List>\n   </>\n   )\n}\n\nexport default Todo;\n\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport './Todo.css';\nimport Todo from './Todo.js';\nimport { Button, Input, InputLabel } from '@material-ui/core';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\n\n\nfunction App() {\n\n\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n\n  useEffect(() => {\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({ id: doc.id, todo: doc.data().todo})))\n    })\n  }, []);\n\n  const addTodo = (event) => {\n    event.preventDefault();\n    db.collection('todos').add({\n    todo: input.charAt(0).toUpperCase() + input.substring(1, input.length),\n    timestamp: firebase.firestore.FieldValue.serverTimestamp()\n  })\n  setInput('');\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Big Boss' Todos!</h1>\n      <form>\n\n          <InputLabel>Write a Todo</InputLabel>\n          <Input value={input} onChange={event => setInput(event.target.value)}/>\n\n      </form>\n      <Button\n        className=\"add__btn\"\n        disabled={!input} type=\"submit\"\n        onClick={addTodo}\n        variant=\"outlined\"\n        color=\"primary\">\n        Add Todo\n      </Button>\n      <FlipMove>\n        <ul className=\"todo__ul\">\n        {todos.map(todo => (\n         <Todo todo={todo} />\n          ))}\n        </ul>\n      </FlipMove>\n\n\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}