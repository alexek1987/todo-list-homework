{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","onClose","e","aria-labelledby","aria-describedby","className","todo","FormControl","Input","placeholder","value","onChange","event","target","Button","variant","color","onClick","collection","doc","id","set","merge","List","ListItem","ListItemText","primary","secondary","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","InputLabel","disabled","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1b20667a.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyChMR0C5dHbioGq6GuvcWz887_d8oGB69M\",\n  authDomain: \"todo-list-react-9f2b9.firebaseapp.com\",\n  databaseURL: \"https://todo-list-react-9f2b9.firebaseio.com\",\n  projectId: \"todo-list-react-9f2b9\",\n  storageBucket: \"todo-list-react-9f2b9.appspot.com\",\n  messagingSenderId: \"1025603995150\",\n  appId: \"1:1025603995150:web:cb456a490d1d3af9b01e5f\",\n  measurementId: \"G-0Z2Q0ZX2XT\"\n});\n\nconst db = firebaseApp.firestore();\n// const auth = firebase.auth();\n// const storage = firebase.storage();\n\n\nexport default db;","import React, { useState } from 'react';\nimport { FormControl, Input, InputLabel, Modal ,Button, List, ListItem, ListItemText } from '@material-ui/core';\nimport './Todo.css';\nimport db from \"./firebase\"\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction Todo(props) {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [input, setInput] = useState();\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const updateTodo = () => {\n    db.collection('todos').doc(props.todo.id).set({\n      todo: input\n    }, { merge: true });\n\n    setOpen(false);\n  }\n\n\nreturn (\n    <>\n<Modal\n    open={open}\n    onClose={e => setOpen(false)}\n    aria-labelledby=\"simple-modal-title\"\n    aria-describedby=\"simple-modal-description\">\n  <div className={classes.paper}>\n    <h4>üìù Update your todo</h4>\n    <p> {props.todo.todo}</p>\n  <div className=\"update__todo\">\n    <form>\n      <FormControl>\n        <Input placeholder=\"Type in new value here...\"value={input} onChange={event => setInput(event.target.value)}/>\n        </FormControl>\n    </form>\n    <Button variant=\"contained\" color=\"primary\" onClick={updateTodo}>Confirm</Button>\n  </div>\n</div>\n  </Modal>\n    <List className=\"todo__list\">\n      <ListItem>\n        <ListItemText primary={props.todo.todo} secondary=\"‚è∞ Deadline: ASAP\"/>\n      </ListItem>\n      <Button variant=\"contained\" color=\"primary\" onClick={e => setOpen(true)}>Update Todo</Button>\n      <DeleteIcon onClick={event =>\n       db.collection('todos').doc(props.todo.id).delete()\n     }/>\n    </List>\n    </>\n  )\n}\n\nexport default Todo\n\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Todo from './Todo.js';\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport db from './firebase';\nimport firebase from 'firebase';\n\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n  // console.log(\">>\",input);\n\n  useEffect(() => {\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      // console.log(snapshot.docs.map(doc => doc.data()))\n      setTodos(snapshot.docs.map(doc => ({ id: doc.id, todo: doc.data().todo})))\n    })\n  }, []);\n\n  const addTodo = (event) => {\n    event.preventDefault();\n    // add todo\n    // console.log(\"it's working\")\n\n    // to do db\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setInput('');\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Big Boss' Todos!üî• üöÄ</h1>\n      <form>\n        <FormControl>\n        <InputLabel>‚úÖ Write a Todo</InputLabel>\n        <Input value={input} onChange={event => setInput(event.target.value)}/>\n        </FormControl>\n      </form>\n      <Button disabled={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\">\n        Add Todo\n      </Button>\n      <ul>\n      {todos.map(todo => (\n       <Todo todo={todo} />\n        ))}\n      </ul>\n     <h1><small>&copy;</small> Dat Big Boss-lifeüï¥Ô∏è</h1>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}